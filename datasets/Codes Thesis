#R-code dataset
library(httr)
library(jsonlite)
library(readr)

main_data <- read_csv("Main_Data.csv")
trust_data <- Trust
unemployment_data <- Unemployment_data
library(readr)
library(dplyr)
library(lubridate)
library(stringr)

main_data <- read_csv("Main_Data.csv")
trust_data <- Trust
unemployment_data <- Unemployment_data

main_monthly <- main_data %>%
  group_by(country, year, Month) %>%
  summarise(
    protest_event_count = sum(Protests_count, na.rm = TRUE),
    riot_event_count = sum(Riots_count, na.rm = TRUE),
    workplace_closure = mean(C2_WorkplaceClosing, na.rm = TRUE),
    school_closure = mean(C1_SchoolClosing, na.rm = TRUE),
    gatherings_closure = mean(C4_RestrictionsGatherings, na.rm = TRUE),
    economic_support_index = mean(economicsupportindex, na.rm = TRUE),
    stringency_index = mean(stringencyindex, na.rm = TRUE),
    movement_index = mean(c(mean(C6_StayHomeRequirements, na.rm = TRUE),
                            mean(C7_RestricInternalMovement, na.rm = TRUE))),
    .groups = "drop"
  )

unemployment_clean <- unemployment_data %>%
  mutate(
    year = year(ymd(paste0(TIME_PERIOD, "-01"))),
    Month = month(ymd(paste0(TIME_PERIOD, "-01")))
  ) %>%
  rename(
    country = geo,
    unemployment = OBS_VALUE
  ) %>%
  select(country, year, Month, unemployment)

trust_filtered <- trust_data %>%
  filter(MEASURE == "14_3" & Measure == "Trust in government") %>%
  select(country = `Reference area`, year = TIME_PERIOD, trust_in_government = OBS_VALUE)

merged_data <- main_monthly %>%
  left_join(unemployment_clean, by = c("country", "year", "Month")) %>%
  left_join(trust_filtered, by = c("country", "year"))

write_csv(merged_data, "merged_monthly_data.csv")

print("Merged dataset:")
print(head(merged_data))
head(merged_data)

sapply(merged_data, function(x) sum(is.na(x)))


library(dplyr)

european_countries <- c(
  "Albania", "Andorra", "Armenia", "Austria", "Azerbaijan",
  "Belarus", "Belgium", "Bosnia and Herzegovina", "Bulgaria",
  "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia",
  "Finland", "France", "Georgia", "Germany", "Greece", "Hungary",
  "Iceland", "Ireland", "Italy", "Kazakhstan", "Kosovo", "Latvia",
  "Liechtenstein", "Lithuania", "Luxembourg", "Malta", "Moldova",
  "Monaco", "Montenegro", "Netherlands", "North Macedonia", "Norway",
  "Poland", "Portugal", "Romania", "Russia", "San Marino", "Serbia",
  "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey",
  "Ukraine", "United Kingdom", "Vatican City"
)
merged_monthly_data <- merged_monthly_data %>%
  filter(country %in% european_countries)
data <- merged_monthly_data %>%
  mutate(total_event_count = protest_event_count + riot_event_count) %>%
  select(-protest_event_count, -riot_event_count, -country, -year, -Month) %>%
  na.omit()

#Finding Mtry an Ntree
library(caret)

mtry_values <- 1:9
ntree_values <- c(100, 200, 500)

rf_results <- data.frame()

for (ntree_val in ntree_values) {
  tune <- expand.grid(mtry = mtry_values)
  
  set.seed(42)
  rf_model <- train(
    total_event_count ~ .,
    data = train_data,
    method = "rf",
    trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE),
    tuneGrid = tune,
    ntree = ntree_val
  )
  
  best_result <- rf_model$results[rf_model$results$mtry == rf_model$bestTune$mtry, ]
  best_result$ntree <- ntree_val
  rf_results <- rbind(rf_results, best_result)
  
  cat("Finished ntree =", ntree_val, "\n")
}

print(rf_results)
Best optimized
set.seed(7)
shuffled_data <- data[sample(nrow(data)), ]
trainIndex <- createDataPartition(shuffled_data$total_event_count, p = 0.8, list = FALSE)
train_data <- shuffled_data[trainIndex, ]
test_data  <- shuffled_data[-trainIndex, ]

control <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
tune <- expand.grid(mtry = 1:9)

RF_model <- train(
  total_event_count ~ .,
  data = train_data,
  method = "rf",
  trControl = control,
  tuneGrid = tune,
  ntree = 200
)

print(RF_model)


predictions <- predict(RF_model, newdata = test_data)
rmse <- sqrt(mean((test_data$total_event_count - predictions)^2))
cat("RMSE on the test data for Random Forest:", rmse, "\n")

importance_vals <- varImp(RF_model, scale = TRUE)
print(importance_vals)

plot(importance_vals, main = "Variable Importance (Random Forest)")

Each country
countries <- unique(data_with_country$country)


importance_list <- list()

set.seed(7)

for (cty in countries) {
  cat("Processing country:", cty, "\n")
  
  country_data <- data_with_country %>%
    filter(country == cty) %>%
    select(-country)
  
  if (nrow(country_data) < 30) {
    cat(" - Skipped (too few rows)\n")
    next
  }
  

  shuffled <- country_data[sample(nrow(country_data)), ]
  train_idx <- createDataPartition(shuffled$total_event_count, p = 0.8, list = FALSE)
  train_data <- shuffled[train_idx, ]
  test_data  <- shuffled[-train_idx, ]
  

  control <- trainControl(method = "cv", number = 5)
  tune <- expand.grid(mtry = 1:floor(sqrt(ncol(train_data) - 1)))
  
  RF_model <- train(
    total_event_count ~ .,
    data = train_data,
    method = "rf",
    trControl = control,
    tuneGrid = tune,
    ntree = 200
  )

  importance_vals <- varImp(RF_model, scale = TRUE)
  importance_df <- as.data.frame(importance_vals$importance)
  importance_df$feature <- rownames(importance_df)
  importance_df$country <- cty
  
  importance_list[[cty]] <- importance_df
}

importance_all <- bind_rows(importance_list)



all_countries <- unique(importance_all$country)

dir.create("country_importance_plots", showWarnings = FALSE)

for (cty in all_countries) {
  country_plot <- importance_all %>%
    filter(country == cty) %>%
    arrange(desc(Overall)) %>%
    slice_head(n = 5) %>%
    ggplot(aes(x = reorder(feature, Overall), y = Overall)) +
    geom_col(fill = "steelblue") +
    coord_flip() +
    labs(
      title = paste("Top 5 Variable Importances -", cty),
      x = "Feature",
      y = "Importance"
    ) +
    theme_minimal()
  
  print(country_plot)
  
  ggsave(
    filename = paste0("country_importance_plots/importance_", gsub(" ", "_", cty), ".png"),
    plot = country_plot,
    width = 8, height = 5
  )
}

importance_wide <- importance_all %>%
  pivot_wider(names_from = feature, values_from = Overall, values_fill = 0)


importance_matrix <- as.matrix(importance_wide[,-1])
rownames(importance_matrix) <- importance_wide$country

heatmap_colors <- colorRampPalette(brewer.pal(9, "YlGnBu"))(100)

png("country_predictor_importance_heatmap.png", width = 1000, height = 800)

heatmap(
  importance_matrix,
  Rowv = NA,
  Colv = NA,
  col = heatmap_colors,
  scale = "none",
  margins = c(8, 12),
  cexRow = 0.8,
  cexCol = 0.8,
  main = "Variable Importance by Country (Random Forest)"
)

dev.off()
